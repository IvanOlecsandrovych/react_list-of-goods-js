{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","ALPHABET_SORTING","LENGTH_SORTING","REVERSE","UNREVERSE","RESET","currentGoods","App","useState","currentSorting","setCurentSorting","currentDirection","setCurrentDirection","sort","good1","good2","localeCompare","length","reverse","className","type","cn","onClick","some","currentGood","id","map","good","ReactDOM","render","document","getElementById"],"mappings":"0OAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAmB,iBACnBC,EAAiB,SACjBC,EAAU,UACVC,EAAY,YACZC,EAAQ,QACVC,EAAY,UAAON,GAEVO,EAAM,WACjB,MAA2CC,mBAAS,IAApD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAmCA,OAjCIH,IAAmBJ,IACrBC,EAAY,UAAON,GACnBY,EAAoB,IACpBF,EAAiB,KAGfC,IAAqBP,IACvBE,EAAY,UAAON,IAGjBS,IAAmBR,GACjBQ,IAAmBP,IACvBI,EAAY,UAAON,IAENa,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKR,EACH,OAAOa,EAAME,cAAcD,GAG7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAG9B,QAAS,OAAO,MAKlBN,IAAqBR,GAAWM,IAAmBJ,GACrDC,EAAaY,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SACZ,UAAW,CACT,WAAYZ,IAAmBR,IAEnCqB,QAAS,kBAAMZ,EAAiBT,IANlC,iCAWA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,SACZ,aAAc,CACZ,WAAYZ,IAAmBP,IAEnCoB,QAAS,kBAAMZ,EAAiBR,IANlC,4BAWA,wBACEkB,KAAK,SACLD,UAAWE,IAAG,SACZ,aAAc,CACZ,WAAYV,IAAqBR,IAErCmB,QAAS,WAELV,EADED,IAAqBR,EACHA,EAEAC,IAV1B,qBAkBCE,EAAaiB,MAAK,SAACC,EAAaC,GAAd,OACjBD,IAAgBxB,EAAgByB,OAElC,wBACEL,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMZ,EAAiBL,IAHlC,sBAWF,6BACGC,EAAaoB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAoBA,aCvH9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8a551759.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst ALPHABET_SORTING = 'alphabetically';\nconst LENGTH_SORTING = 'length';\nconst REVERSE = 'reverse';\nconst UNREVERSE = 'unreverse';\nconst RESET = 'reset';\nlet currentGoods = [...goodsFromServer];\n\nexport const App = () => {\n  const [currentSorting, setCurentSorting] = useState('');\n\n  const [currentDirection, setCurrentDirection] = useState('');\n\n  if (currentSorting === RESET) {\n    currentGoods = [...goodsFromServer];\n    setCurrentDirection('');\n    setCurentSorting('');\n  }\n\n  if (currentDirection === UNREVERSE) {\n    currentGoods = [...goodsFromServer];\n  }\n\n  if (currentSorting === ALPHABET_SORTING\n     || currentSorting === LENGTH_SORTING) {\n    currentGoods = [...goodsFromServer];\n\n    currentGoods.sort((good1, good2) => {\n      switch (currentSorting) {\n        case ALPHABET_SORTING: {\n          return good1.localeCompare(good2);\n        }\n\n        case LENGTH_SORTING: {\n          return good1.length - good2.length;\n        }\n\n        default: return 0;\n      }\n    });\n  }\n\n  if (currentDirection === REVERSE && currentSorting !== RESET) {\n    currentGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button',\n            'is-info', {\n              'is-light': currentSorting !== ALPHABET_SORTING,\n            })}\n          onClick={() => setCurentSorting(ALPHABET_SORTING)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button',\n            'is-success', {\n              'is-light': currentSorting !== LENGTH_SORTING,\n            })}\n          onClick={() => setCurentSorting(LENGTH_SORTING)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button',\n            'is-warning', {\n              'is-light': currentDirection !== REVERSE,\n            })}\n          onClick={() => {\n            if (currentDirection !== REVERSE) {\n              setCurrentDirection(REVERSE);\n            } else {\n              setCurrentDirection(UNREVERSE);\n            }\n          }\n        }\n        >\n          Reverse\n        </button>\n\n        {currentGoods.some((currentGood, id) => (\n          currentGood !== goodsFromServer[id]\n        )) && (\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={() => setCurentSorting(RESET)}\n        >\n          Reset\n        </button>\n        )}\n\n      </div>\n\n      <ul>\n        {currentGoods.map(good => (\n          <li data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}